// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rpcprotos/go_server.proto

package rpcprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoRpcServerInterfaceClient is the client API for GoRpcServerInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoRpcServerInterfaceClient interface {
	//登录IM
	IMLogin(ctx context.Context, in *LoginParam, opts ...grpc.CallOption) (*GoBaseResult, error)
	//Server To Client 消息发送结果回调
	ServerToClientMessageResult(ctx context.Context, in *ServerToClientMsgResultParam, opts ...grpc.CallOption) (*GoBaseResult, error)
}

type goRpcServerInterfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoRpcServerInterfaceClient(cc grpc.ClientConnInterface) GoRpcServerInterfaceClient {
	return &goRpcServerInterfaceClient{cc}
}

func (c *goRpcServerInterfaceClient) IMLogin(ctx context.Context, in *LoginParam, opts ...grpc.CallOption) (*GoBaseResult, error) {
	out := new(GoBaseResult)
	err := c.cc.Invoke(ctx, "/rpcprotos.GoRpcServerInterface/IMLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goRpcServerInterfaceClient) ServerToClientMessageResult(ctx context.Context, in *ServerToClientMsgResultParam, opts ...grpc.CallOption) (*GoBaseResult, error) {
	out := new(GoBaseResult)
	err := c.cc.Invoke(ctx, "/rpcprotos.GoRpcServerInterface/ServerToClientMessageResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoRpcServerInterfaceServer is the server API for GoRpcServerInterface service.
// All implementations must embed UnimplementedGoRpcServerInterfaceServer
// for forward compatibility
type GoRpcServerInterfaceServer interface {
	//登录IM
	IMLogin(context.Context, *LoginParam) (*GoBaseResult, error)
	//Server To Client 消息发送结果回调
	ServerToClientMessageResult(context.Context, *ServerToClientMsgResultParam) (*GoBaseResult, error)
	mustEmbedUnimplementedGoRpcServerInterfaceServer()
}

// UnimplementedGoRpcServerInterfaceServer must be embedded to have forward compatible implementations.
type UnimplementedGoRpcServerInterfaceServer struct {
}

func (UnimplementedGoRpcServerInterfaceServer) IMLogin(context.Context, *LoginParam) (*GoBaseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IMLogin not implemented")
}
func (UnimplementedGoRpcServerInterfaceServer) ServerToClientMessageResult(context.Context, *ServerToClientMsgResultParam) (*GoBaseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerToClientMessageResult not implemented")
}
func (UnimplementedGoRpcServerInterfaceServer) mustEmbedUnimplementedGoRpcServerInterfaceServer() {}

// UnsafeGoRpcServerInterfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoRpcServerInterfaceServer will
// result in compilation errors.
type UnsafeGoRpcServerInterfaceServer interface {
	mustEmbedUnimplementedGoRpcServerInterfaceServer()
}

func RegisterGoRpcServerInterfaceServer(s grpc.ServiceRegistrar, srv GoRpcServerInterfaceServer) {
	s.RegisterService(&GoRpcServerInterface_ServiceDesc, srv)
}

func _GoRpcServerInterface_IMLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRpcServerInterfaceServer).IMLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotos.GoRpcServerInterface/IMLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRpcServerInterfaceServer).IMLogin(ctx, req.(*LoginParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoRpcServerInterface_ServerToClientMessageResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerToClientMsgResultParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoRpcServerInterfaceServer).ServerToClientMessageResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcprotos.GoRpcServerInterface/ServerToClientMessageResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoRpcServerInterfaceServer).ServerToClientMessageResult(ctx, req.(*ServerToClientMsgResultParam))
	}
	return interceptor(ctx, in, info, handler)
}

// GoRpcServerInterface_ServiceDesc is the grpc.ServiceDesc for GoRpcServerInterface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoRpcServerInterface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcprotos.GoRpcServerInterface",
	HandlerType: (*GoRpcServerInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IMLogin",
			Handler:    _GoRpcServerInterface_IMLogin_Handler,
		},
		{
			MethodName: "ServerToClientMessageResult",
			Handler:    _GoRpcServerInterface_ServerToClientMessageResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcprotos/go_server.proto",
}
